import { auth } from "@/composables/firebase";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  sendPasswordResetEmail,
  updatePassword,
  updateProfile,
  onAuthStateChanged,
  type User,
} from "firebase/auth";
import { ref } from "vue";
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from "firebase/storage";
import { doc, setDoc, serverTimestamp } from "firebase/firestore";
import { db } from "@/composables/firebase";

// üë§ Global state
const currentUser = ref<User | null>(null);
const authLoaded = ref(false);

// üîÅ Oturum kontrol√º
onAuthStateChanged(auth, (user) => {
  console.log("üë§ onAuthStateChanged √ßalƒ±≈ütƒ±:", user?.email || "Anonim");
  currentUser.value = user;
  authLoaded.value = true;
});

// üîì Kullanƒ±labilir composable
export const useAuth = () => {
  return { currentUser, authLoaded, logoutUser };
};

// üÜï Kayƒ±t + Firestore i≈ülemleri
export const registerUser = async (email: string, password: string) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const uid = userCredential.user.uid;

    console.log("‚úÖ Auth ba≈üarƒ±yla olu≈üturuldu:", uid);

    // Firestore > wallets
    await setDoc(doc(db, "wallets", uid), { balance: 0 });
    console.log("üí∞ Wallet olu≈üturuldu");

    // Firestore > users
    await setDoc(doc(db, "users", uid), {
      email,
      role: "user",
      photoURL: "/avatars/avatar1.png",
      createdAt: serverTimestamp(),
    });
    console.log("üóÇÔ∏è Firestore > users kaydedildi");

    // Firebase Auth profilini g√ºncelle
    await updateProfile(userCredential.user, {
      photoURL: "/avatars/avatar1.png",
    });

    return userCredential.user;
  } catch (error) {
    console.error("‚ùå registerUser hatasƒ±:", error);
    throw error;
  }
};

// üîê Giri≈ü
export const loginUser = async (email: string, password: string) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    console.log("‚úÖ Giri≈ü ba≈üarƒ±lƒ±:", userCredential.user.email);
    return userCredential.user;
  } catch (error) {
    console.error("‚ùå loginUser hatasƒ±:", error);
    throw error;
  }
};

// üö™ √áƒ±kƒ±≈ü
export const logoutUser = async () => {
  try {
    await signOut(auth);
    currentUser.value = null;
    console.log("üëã √áƒ±kƒ±≈ü yapƒ±ldƒ±");
  } catch (error) {
    console.error("‚ùå logoutUser hatasƒ±:", error);
    throw error;
  }
};

// üîÅ ≈ûifre sƒ±fƒ±rlama
export const resetPassword = async (email: string) => {
  try {
    await sendPasswordResetEmail(auth, email);
    console.log("üì© ≈ûifre sƒ±fƒ±rlama e-postasƒ± g√∂nderildi");
  } catch (error) {
    console.error("‚ùå resetPassword hatasƒ±:", error);
    throw error;
  }
};

// üîí ≈ûifre g√ºncelleme
export const updateUserPassword = async (newPassword: string) => {
  const user = auth.currentUser;
  if (!user) throw new Error("Giri≈ü yapƒ±lmamƒ±≈ü.");
  await updatePassword(user, newPassword);
  console.log("üîê ≈ûifre g√ºncellendi");
};

// üñºÔ∏è Avatar g√ºncelleme
export const uploadAvatar = async (file: File) => {
  const user = auth.currentUser;
  if (!user) throw new Error("Giri≈ü yapƒ±lmamƒ±≈ü.");

  const storage = getStorage();
  const fileRef = storageRef(storage, `avatars/${user.uid}`);
  await uploadBytes(fileRef, file);
  const photoURL = await getDownloadURL(fileRef);
  await updateProfile(user, { photoURL });

  console.log("üñºÔ∏è Avatar g√ºncellendi:", photoURL);
  return photoURL;
};
